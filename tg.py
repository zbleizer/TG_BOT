import logging
import datetime
import dataclasses

from email.message import Message
from aiogram import Bot, Dispatcher, types
from aiogram import Router
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import asyncio
import random

from dataclasses import dataclass
from dateutil.parser import parse
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton


PHYSICAL_CONST = 23.6884
EMOTIONAL_CONST = 28.426125
INTELLIGENT_CONST = 33.163812
HEART_CONST = 37.901499
CREATIVE_CONST = 42.6392
INTUITIVE_CONST = 47.3769
HIGHER_CONST = 52.1146


@dataclass
class BiorhythmCompatibility:
    first_birthdate: datetime.date
    second_birthdate: datetime.date

    def calculate_biorhythm(self, birthdate, period):
        days_since_birth = (datetime.date.today() - birthdate).days
        return days_since_birth % period

    def __post_init__(self) -> None:
        self.first_physical = self.calculate_biorhythm(self.first_birthdate, PHYSICAL_CONST)
        self.first_emotional = self.calculate_biorhythm(self.first_birthdate, EMOTIONAL_CONST)
        self.first_intelligent = self.calculate_biorhythm(self.first_birthdate, INTELLIGENT_CONST)
        self.first_heart = self.calculate_biorhythm(self.first_birthdate, HEART_CONST)
        self.first_creative = self.calculate_biorhythm(self.first_birthdate, CREATIVE_CONST)
        self.first_intuitive = self.calculate_biorhythm(self.first_birthdate, INTUITIVE_CONST)
        self.first_higher = self.calculate_biorhythm(self.first_birthdate, HIGHER_CONST)


        self.second_physical = self.calculate_biorhythm(self.second_birthdate, PHYSICAL_CONST)
        self.second_emotional = self.calculate_biorhythm(self.second_birthdate, EMOTIONAL_CONST)
        self.second_intelligent = self.calculate_biorhythm(self.second_birthdate, INTELLIGENT_CONST)
        self.second_heart = self.calculate_biorhythm(self.second_birthdate, HEART_CONST)
        self.second_creative = self.calculate_biorhythm(self.second_birthdate, CREATIVE_CONST)
        self.second_intuitive = self.calculate_biorhythm(self.second_birthdate, INTUITIVE_CONST)
        self.second_higher = self.calculate_biorhythm(self.second_birthdate, HIGHER_CONST)


        self.compatibility_percentage = self.calculate_compatibility()

    def calculate_compatibility(self) -> int:

        total_difference = (
            abs(self.first_physical - self.second_physical) +
            abs(self.first_emotional - self.second_emotional) +
            abs(self.first_intelligent - self.second_intelligent) +
            abs(self.first_heart - self.second_heart) +
            abs(self.first_creative - self.second_creative) +
            abs(self.first_intuitive - self.second_intuitive) +
            abs(self.first_higher - self.second_higher)
        )

        max_possible_difference = 7 * max(PHYSICAL_CONST, EMOTIONAL_CONST, INTELLIGENT_CONST, HEART_CONST, CREATIVE_CONST, INTUITIVE_CONST, HIGHER_CONST)
        compatibility = 100 - int((total_difference / max_possible_difference) * 100)
        return max(0, min(100, compatibility))


@dataclasses.dataclass
class Sector:
    digit: int | None
    title: str
    value: int

    def __str__(self):
        interpretation = self.interpret_value()
        return f"{self.title}: {self.value} ({interpretation})"

    def interpret_value(self):
        if self.title == "–•–∞—Ä–∞–∫—Ç–µ—Ä" and self.value == 0:
            return "–ü—É—Å—Ç–æ ‚Äì —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π, —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∫ 1."
        elif self.title == "–î–æ–ª–≥" and self.value >= 2:
            return "8/88 –∏ –±–æ–ª–µ–µ"
        elif self.value == 1:
            return "1 ‚Äì –º—è–≥–∫–æ—Å—Ç—å, —Å–Ω–∏–∂–µ–Ω–Ω—ã–µ –≤–æ–ª—è –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –≤—ã—Å–æ–∫–∏–π —Å—Ç–∞—Ç—É—Å."
        elif self.value == 2:
            return "11 ‚Äì –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π, –≤–µ–∂–ª–∏–≤—ã–π, –ø—Ä–∏—è—Ç–Ω—ã–π, –ª—é–±–∏—Ç –ø–æ—Ö–≤–∞–ª—É."
        elif self.value == 3:
            return "111 ‚Äì –∑–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å."
        elif self.value == 4:
            return "1111 ‚Äì –ø—Ä–∏—Ä–æ–∂–¥–µ–Ω–Ω—ã–π –ª–∏–¥–µ—Ä, –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å."
        elif self.value == 5:
            return "11111 ‚Äì –¥–∏–∫—Ç–∞—Ç–æ—Ä, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –±–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π."
        elif self.value == 6:
            return "111111 ‚Äì –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ –∞–º–±–∏—Ü–∏–∏, –Ω–∏–∑–∫–∞—è —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å."
        elif self.value >= 7:
            return "1111111 ‚Äì —É—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –∏–∑–±–µ–≥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏."
        else:
            return "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏."


def get_digit_sum(n: int) -> int:
    s = 0
    while n:
        s += n % 10
        n //= 10
    return s



def zero_fill(number: int, width: int = 2) -> str:
    return str(number).zfill(width)


@dataclass
class PythagorasSquare:
    birthdate: datetime.date

    def __post_init__(self) -> None:
        self.string_birthdate = self.birthdate.strftime("%d%m%Y")
        self.digit_rows = self.get_digit_rows()
        self.sectors = self.calculate_sectors()


    def get_first_number(self) -> int:
        return get_digit_sum(int(self.string_birthdate))

    def get_second_number(self) -> int:
        return get_digit_sum(self.get_first_number())

    def get_third_number(self) -> int:
        return self.get_first_number() - int(self.string_birthdate[0]) * 2

    def get_fourth_number(self) -> int:
        return get_digit_sum(self.get_third_number())

    def get_digit_rows(self) -> list[list[int]]:
        second_row = (
            list(map(int, list(zero_fill(self.get_first_number()))))
            + list(map(int, list(zero_fill(self.get_second_number()))))
            + list(map(int, list(zero_fill(self.get_third_number()))))
            + list(map(int, list(zero_fill(self.get_fourth_number()))))
        )

        return [
            list(map(int, list(self.string_birthdate))),
            second_row
        ]

    def get_sector_value(self, digit: int) -> int:
        count = 0
        for row in self.digit_rows:
            count += row.count(digit)
        return count

    def get_additional_sector_value(self, sectors: list[Sector]) -> int:
        return sum(s.value for s in sectors)


    def calculate_sectors(self) -> list[Sector]:
        sectors = [
            Sector(digit=1, title="–•–∞—Ä–∞–∫—Ç–µ—Ä", value=self.get_sector_value(1)),
            Sector(digit=2, title="–≠–Ω–µ—Ä–≥–∏—è", value=self.get_sector_value(2)),
            Sector(digit=3, title="–ò–Ω—Ç–µ—Ä–µ—Å", value=self.get_sector_value(3)),
            Sector(digit=4, title="–ó–¥–æ—Ä–æ–≤—å–µ", value=self.get_sector_value(4)),
            Sector(digit=5, title="–õ–æ–≥–∏–∫–∞", value=self.get_sector_value(5)),
            Sector(digit=6, title="–¢—Ä—É–¥", value=self.get_sector_value(6)),
            Sector(digit=7, title="–£–¥–∞—á–∞", value=self.get_sector_value(7)),
            Sector(digit=8, title="–î–æ–ª–≥", value=self.get_sector_value(8)),
            Sector(digit=9, title="–ü–∞–º—è—Ç—å", value=self.get_sector_value(9)),
            Sector(digit=None, title="–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", value=self.get_additional_sector_value([self.get_sector_value(1), self.get_sector_value(2), self.get_sector_value(3)])),
            Sector(digit=None, title="–ë—ã—Ç", value=self.get_additional_sector_value([self.get_sector_value(4), self.get_sector_value(5), self.get_sector_value(6)])),
            Sector(digit=None, title="–¢–∞–ª–∞–Ω—Ç", value=self.get_additional_sector_value([self.get_sector_value(7), self.get_sector_value(8), self.get_sector_value(9)])),
            Sector(digit=None, title="–¶–µ–ª—å", value=self.get_additional_sector_value([self.get_sector_value(1), self.get_sector_value(4), self.get_sector_value(7)])),
            Sector(digit=None, title="–°–µ–º—å—è", value=self.get_additional_sector_value([self.get_sector_value(2), self.get_sector_value(5), self.get_sector_value(8)])),
            Sector(digit=None, title="–ü—Ä–∏–≤—ã—á–∫–∏", value=self.get_additional_sector_value([self.get_sector_value(3), self.get_sector_value(6), self.get_sector_value(9)])),
            Sector(digit=None, title="–î—É—Ö", value=self.get_additional_sector_value([self.get_sector_value(1), self.get_sector_value(5), self.get_sector_value(9)])),
            Sector(digit=None, title="–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç", value=self.get_additional_sector_value([self.get_sector_value(3), self.get_sector_value(5), self.get_sector_value(7)])),
        ]
        return sectors


    def __str__(self):
        return "\n".join(map(str, self.sectors))


class Form(StatesGroup):
    waiting_for_birthdate = State()
    waiting_for_first_birthdate = State()
    waiting_for_second_birthdate = State()
    waiting_for_birthdate2 = State()


with open('TOKEN.txt', 'r') as f:
    token = f.read().strip()

start_router = Router()
bot = Bot(token)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
dp.include_router(start_router)

logging.basicConfig(level=logging.INFO)

button_prediction = KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üíå")
button_compatibility = KeyboardButton(text="–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å üí´")
button_help = KeyboardButton(text="‚ùóÔ∏è–ü–æ–º–æ—â—å‚ùóÔ∏è")
button_pythogoras = KeyboardButton(text="üß©–ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞ üß©")

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [button_prediction],
        [button_compatibility],
        [button_help],
        [button_pythogoras]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)


@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                         "–ë–æ—Ç ü§ç–í–ª—é–±–∏—Å—åü§ç –æ—Ç–∫—Ä–æ–µ—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–π–Ω—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, "
                         "–∞ —Ç–∞–∫–∂–µ –ø–æ–¥–µ–ª–∏—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –¥–ª—è —Ç–µ–±—è üíå\n\n", reply_markup=keyboard)


@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    await message.answer(
        "–Ø –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ' –∏–ª–∏ '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'")


@dp.message()
async def handle_message(message: types.Message, state: FSMContext):
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üíå":
        await state.set_state(Form.waiting_for_birthdate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")

    elif message.text == "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å üí´":
        await state.set_state(Form.waiting_for_first_birthdate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")

    elif message.text == "üß©–ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞ üß©":
        await state.set_state(Form.waiting_for_birthdate2)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")

    elif message.text == "‚ùóÔ∏è–ü–æ–º–æ—â—å‚ùóÔ∏è":
        await cmd_help(message)
    else:

        if await state.get_state() == Form.waiting_for_birthdate:
            await handle_birthdate(message, state)

        elif await state.get_state() == Form.waiting_for_first_birthdate:
            await process_first_birthdate(message, state)

        elif await state.get_state() == Form.waiting_for_second_birthdate:
            await process_second_birthdate(message, state)

        elif await state.get_state() == Form.waiting_for_birthdate2:
            await pyth_birthdate(message, state)


predictions = [
    "–°–µ–≥–æ–¥–Ω—è –≤–∞—Å –∂–¥–µ—Ç —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å, –ø–æ–ª–Ω—ã–π –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤!",
    "–í–∞—Å –∂–¥–µ—Ç —É–¥–∞—á–∞ –≤ –ª—é–±–≤–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ. –ù–µ –±–æ–π—Ç–µ—Å—å —Ä–∏—Å–∫–æ–≤–∞—Ç—å!",
    "–ó–≤–µ–∑–¥—ã —Å—É–ª—è—Ç –≤–∞–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—Å–ø–µ—Ö –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ.",
    "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–µ–≥–æ–¥–Ω—è –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –∫ —Å–≤–æ–∏–º –±–ª–∏–∑–∫–∏–º. –û–Ω–∏ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –≤–∞—Å.",
    "–í–∞—à–∏ –º–µ—á—Ç—ã —Å–±—É–¥—É—Ç—Å—è. –¢–æ–ª—å–∫–æ –≤–µ—Ä—å—Ç–µ –≤ —Å–µ–±—è!",
    "–≠—Ç–æ—Ç –¥–µ–Ω—å –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å!",
    "–°–µ–≥–æ–¥–Ω—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª–Ω—ã —ç–Ω–µ—Ä–≥–∏–∏ –∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å –ø–æ–ª—å–∑–æ–π!",
    "–í–∞—Å –∂–¥–µ—Ç –¥–µ–Ω—å, –ø–æ–ª–Ω—ã–π —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–µ—Å–µ–ª—å—è. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–æ–º–µ–Ω—Ç–æ–º!",
    "–í–∞—Å –∂–¥–µ—Ç —É—Å–ø–µ—Ö –≤ –¥–µ–ª–∞—Ö –∏ –≥–∞—Ä–º–æ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏. –û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!",
    "–ù–µ –±–æ–π—Ç–µ—Å—å –±—ã—Ç—å —Å–æ–±–æ–π, –∏ –º–∏—Ä –æ—Ç–∫—Ä–æ–µ—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–≤–æ–∏ –æ–±—ä—è—Ç–∏—è.",

]


def calculate_compatibility(birthday1, birthday2):
    try:
        biorhythm_result = BiorhythmCompatibility(birthday1, birthday2)
        biorhythm_str = (biorhythm_result.calculate_compatibility())

        return (
            f"ü§ç–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É {birthday1.strftime('%d.%m.%Y')} –∏ {birthday2.strftime('%d.%m.%Y')} —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ ü§ç\n"
            f"\n–ë–∏–æ—Ä–∏—Ç–º—ã: {biorhythm_str}%\n"
        )

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}"


def calculate_square(birthday1):
    try:
        pythagoras1 = PythagorasSquare(birthday1)

        return (
            f"üß©–†–∞—Å—Å—á–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞ üß©\n"
            f"{pythagoras1}"
        )

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: {e}"


def validate_date(date_str):
    try:
        date = parse(date_str, dayfirst=True)
        if date > datetime.datetime.now():
            raise ValueError("–¢–∞–∫–æ–π –¥–∞—Ç—ã –µ—â–µ –Ω–µ –±—ã–ª–æ.")
        return date.date()

    except ValueError as e:
        raise ValueError(f"Invalid date: {e}")


@dp.message(StateFilter(Form.waiting_for_birthdate2))
async def pyth_birthdate(message: types.Message, state: FSMContext):
    try:
        birthdate = validate_date(message.text)
        result = calculate_square(birthdate)
        await message.answer(result)
        await state.clear()

    except (ValueError, IndexError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

    except Exception as e:
        logging.exception(f"An error occurred: {e}")


@dp.message(StateFilter(Form.waiting_for_birthdate))
async def handle_birthdate(message: types.Message, state: FSMContext):
    try:
        birthdate = validate_date(message.text)
        user_name = message.from_user.first_name
        random_prediction = random.choice(predictions)
        await message.answer(f"{user_name}, –≤–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {random_prediction}")
        await state.clear()

    except (ValueError, IndexError):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

    except Exception as e:
        logging.exception(f"An error occurred: {e}")


@dp.message(StateFilter(Form.waiting_for_first_birthdate))
async def process_first_birthdate(message: types.Message, state: FSMContext):
    try:
        birthday1 = validate_date(message.text)
        await state.update_data(birthday1=birthday1)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(Form.waiting_for_second_birthdate)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logging.exception(f"An error occurred: {e}")


@dp.message(StateFilter(Form.waiting_for_second_birthdate))
async def process_second_birthdate(message: types.Message, state: FSMContext):
    try:
        birthday2 = validate_date(message.text)
        user_data = await state.get_data()
        birthday1 = user_data['birthday1']
        compatibility_result = calculate_compatibility(birthday1, birthday2)
        await message.answer(compatibility_result)
        await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'.",
                             reply_markup=payment_keyboard())
        await state.clear()

    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    except Exception as e:
        logging.exception(f"An error occurred: {e}")


def payment_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pay')]  # Correct way
        ]
    )
    return keyboard


@dp.callback_query(lambda c: c.data == 'pay')
async def handle_payment(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...")


async def main():
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped.")
    except Exception as e:
        logging.exception(f"A critical error occurred: {e}")
